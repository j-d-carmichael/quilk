{"pages":[{"title":"quilk","text":"Est. 4th Sept. 2016 If anyone fancies helping evolve quilk give me a shout, many [skilled] hands make light work. Intro Use a single quilk.json file locally, on a dev server, a staging server and production server. Use quilk to build your web applications. Ping messages via email or webhooks (eg Slack) when builds are complete or failed. Yet another module runner designed to compile SASS and JS files and rsync... in short, speed. I needed a super lightweight solution that worked fast on both low spec machines with a HDD, as well as the high spec with SSD machines. The current tools available were killing the build speed on an i5 HDD machine, especially when throwing watchers plus an IDE into the mix... a lot of time sitting and waiting. Quilk began as a single script which utilized the popular node-sass npm package plus the nice and light concat-files npm package together with the snappy chokidar file watcher. The result was a working solution for lower spec machines that was still rapid fast and didn't require npm install to download the entire internet. As quilk grew and was being used in more projects, the configuration nature of quilk started to emerge. Using the same script on different projects but with just altering a few lines of a JSON file meant projects were setup in no time, and it was no longer possible to create a whacky build file... Roll forward to today and I use quilk in many projects using most of the std tools from sass to less to browserify. Latest release Latest node-sass added to the stack. NB: if you are using quilk on ubuntu 16 + node 6.9.1 + npm 3.10.8... ensure you completely uninstall quilk from your system before installing the latest version, then double check is really is gone from your global node_modules directory (npm root -g to discover the location). This may or may not affect you, but i recently migrated a server from Ubuntu 14 -&gt; 16 which I think left some dangling files maybe... which resulted in a quilk upgrade hanging. Anyway, as every support guy ever said.. &quot;Have you tried turning it on and off again&quot; :D :D Coming Next Improve the docs. Quilk now offers a lot of out of the box functionality but the documentation is not great, this will be coming it later releases.","tags":"","url":"index.html"},{"title":"How it works","text":"Quilk works by taking the project relevant settings and data from a quilk.json file and feeding that said data into prebuilt modules. These said modules come packaged with quilk and do all the basic things you might expect, for example compiling .scss files or finding then concatenating javascript files etc. When you start quilk, the runner simply loops and runs each module it finds in the modules array in the quilk.json one by one until exhaustion. The base modules quilk comes with handle the majority of tasks required to compile and build modern day web applications and the quilk.json can be configured in a matter of minutes. However, should you require something that is outside the std modules then you can simply write your own.","tags":"","url":"How_it_works.html"},{"title":"Installation","text":"Quilk is not installed as a dependency in a package.json file, but installed globally npm install -g quilk","tags":"","url":"Installation.html"},{"title":"Updating","text":"The most reliable way to update most NPM globally installed packages is just just to install them again.. npm install -g quilk After an update on node you may also completely remove quilk first before updating npm uninstall -g quilk Double check that the quilk module has been completely removed by checking the npm nod_modules folder. Discover where the directory is with npm root -g, if the quilk directory is still there.. rm -R quilk.","tags":"","url":"Updating.html"},{"title":"Getting started","text":"First up... I don't enjoy typing dashes before cli args, if you do that is fine they will still work but, the quilk cli commands also work without, eg the following all map to the same thing.. help: quilk help quilk -help quilk --help Generating a new quilk.json The quilk.json is, as you might have already guessed, where all the quilk magic is configured. Create your base quilk.json file by running from the root of your project (or copying from another project): quilk init What is in the generated quilk.json The generated quilk.json file is configured to run the just_for_fun module. You can take quilk for a test drive by typing quilk, this will take the developer in the quilk.json named default and pass to the modules the quilk.json is configured to run, which in this case is just the fun run module. Single build With your quilk.json configured you can kick off a single run with: quilk Watch your project and auto-rebuild Adding watchinto the mix will instruct quilk to watch your files and re-run the modules in the modules array again after a change (either a new file or change or removal). The watcher is chokidar: quilk watch Build for a particular environment In the quilk.json you will see a release_commands_or_modules section. Here you can add commands or modules to be run, note the pre and post section, this just means things run before the usual modules array or after. EG you may wish to run a bower install on an environment before running the std modules array, when completing you will likely wish to minify and compress the js and css files. quilk release=live","tags":"","url":"Getting_started.html"},{"title":"Desktop notifications","text":"The desktop notifier is defined developer by developer. Most teams today do not insist that all devs work on the same OS, and most devs have their own preferences to their own machine. With quilk you can turn on or off the notifications on a dev by dev basis, just set on to true or false. There are also a few alternative desktop popups available and vary from OS to OS. As Windows potentially has two types (depending on the version XP, 7 or 10) this block in the json is granular down to the type of popup. And below is the list: WindowsBalloon: Typically for windows 7,8,10. WindowsToaster: Typically for windows 7,8 (10 seems to default to the balloon). Growl: Typically for mac users. NotifySend: Typically for Linux. The notifier uses this module: node-notifier The notifier object for the current quilk developer will, along with the title and message, be passed to the notifier. Please refer to their documentation for the options, if you see an option from their docs, just add it to your quilk.json as another key\/value pair in the notifier object of your developer. Example &quot;developers&quot; : { &quot;default&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : true, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 5000, &quot;sound&quot;: true } } },","tags":"","url":"Desktop_notifications.html"},{"title":"browserify bundle","text":"browserify_bundle This will build a bundle.js from other js modules. A must for when building nodeJs web applications, use select server side code at the client and the client code at the server, less code to write. An example quilk.json block { &quot;name&quot;: &quot;Browserify files&quot;, &quot;module&quot; : &quot;browserify_bundle&quot;, &quot;browserify_main&quot;: &quot;\/public\/browserify_modules\/browserifyMain.js&quot;, &quot;browserify_bundle_name&quot;: &quot;bfyModules&quot;, &quot;target&quot; : &quot;\/public\/js\/bundle.js&quot; }, Example browserify main &quot;use strict&quot;; module.exports = { formValidator : require('.\/formValidator'), validators : require( '.\/validators') }; The modules using the above kitchen sink json would be accessed in you application like this (the browserify_bundle_name you use is what you call in your application): var passfail = bfyModules.validators.parse( 'is_max_length:50', 'some input string' );","tags":"","url":"Modules_baked_in\/browserify_bundle.html"},{"title":"command run","text":"command_run Accepts a program and an array of arguments and exectures them using nodejs child-process spawn. An example quilk.json block { &quot;name&quot;: &quot;running bower install&quot;, &quot;module&quot;: &quot;command_run&quot;, &quot;program&quot;: &quot;bower&quot;, &quot;arguments&quot;: [&quot;install&quot;, &quot;-s&quot;] },","tags":"","url":"Modules_baked_in\/command_run.html"},{"title":"css fixed","text":"css_fixed A simple concat module, supply it paths from the root of your project and output will be one big css file. Perfect for including css from 3rd parties eg via bower. An example quilk.json block { &quot;name&quot; : &quot;Vendor CSS Files&quot;, &quot;module&quot;: &quot;css_fixed&quot;, &quot;files&quot;: [ &quot;\/public\/bower_components\/bootstrap\/dist\/css\/bootstrap.css&quot;, &quot;\/public\/bower_components\/ngDialog\/css\/ngDialog.css&quot;, &quot;\/public\/bower_components\/ngDialog\/css\/ngDialog-theme-plain.css&quot; ], &quot;target&quot;: &quot;\/public\/css\/vendor.css&quot; },","tags":"","url":"Modules_baked_in\/css_fixed.html"},{"title":"js find","text":"js_find This will create a single js file based on js files it finds within an array of paths you provide. You may also state which files must be included at the top of the generated file. An example quilk.json block { &quot;name&quot;: &quot;App Files&quot;, &quot;module&quot;: &quot;js_find&quot;, &quot;include_first&quot;: [ &quot;\/public\/js_to_compile\/globalOverrideFunctions.js&quot;, &quot;\/public\/js_to_compile\/app.js&quot;, &quot;\/public\/js_to_compile\/app.config.js&quot; ], &quot;find_in_paths&quot;: [ &quot;\/public\/js_to_compile\/&quot; ], &quot;target&quot; : &quot;\/public\/js\/build.js&quot; },","tags":"","url":"Modules_baked_in\/js_find.html"},{"title":"js fixed","text":"js_fixed A simplified version of js_find, provide a static list of files and the module will simply concat them all together in a single js file. An example quilk.json block { &quot;name&quot; : &quot;Vendor Files&quot;, &quot;module&quot;: &quot;js_fixed&quot;, &quot;files&quot;: [ &quot;\/public\/bower_components\/jquery\/dist\/jquery.js&quot;, &quot;\/public\/bower_components\/bootstrap\/dist\/js\/bootstrap.min.js&quot;, &quot;\/public\/bower_components\/angular\/angular.min.js&quot;, &quot;\/public\/bower_components\/angular-route\/angular-route.min.js&quot;, &quot;\/public\/bower_components\/angular-sanitize\/angular-sanitize.min.js&quot;, &quot;\/public\/bower_components\/angular-bootstrap\/ui-bootstrap.min.js&quot;, &quot;\/public\/bower_components\/angular-bootstrap\/ui-bootstrap-tpls.min.js&quot;, &quot;\/public\/bower_components\/ngDialog\/js\/ngDialog.min.js&quot; ], &quot;target&quot;: &quot;\/public\/js\/vendor.js&quot; },","tags":"","url":"Modules_baked_in\/js_fixed.html"},{"title":"less std","text":"less_std A standard module to build css files. Provide the entry point and output point and the module will handle the rest. An example quilk.json block { &quot;name&quot; : &quot;Less compiler&quot;, &quot;module&quot; : &quot;less_std&quot;, &quot;resourcePaths&quot; : [&quot;\/resources\/assets\/less\/&quot;], &quot;input_path&quot; : &quot;\/resources\/assets\/less\/xenon.less&quot;, &quot;target&quot; : &quot;\/public\/css\/app.css&quot; },","tags":"","url":"Modules_baked_in\/less_std.html"},{"title":"node minify","text":"node_minify This is a direct mapping to the popular node_minify npm packge. Typically you would use this module in the release block of your quilk.json as there is not much point in continually compressing code for development as this will slow development down. Example use of node_minify in a release block Below we can that post build of the usual modules we compress the javascript and then the css. In this case we are not using a .min naming convention and simply taking the .css file already compiled and simply overwriting them with a newly compressed file. &quot;release_commands_or_modules&quot;: { &quot;live&quot;:{ &quot;post&quot;: [{ &quot;name&quot;: &quot;minify the js&quot;, &quot;module&quot;: &quot;node_minify&quot;, &quot;type&quot;:&quot;uglifyjs&quot;, &quot;input&quot;:[ &quot;\/build\/js\/app.js&quot; ], &quot;target&quot;: &quot;\/build\/js\/app.js&quot; },{ &quot;name&quot;: &quot;minify the css&quot;, &quot;module&quot;: &quot;node_minify&quot;, &quot;type&quot;:&quot;sqwish&quot;, &quot;input&quot;:[ &quot;\/build\/css\/app.css&quot; ], &quot;target&quot;: &quot;\/build\/css\/app.css&quot; }],","tags":"","url":"Modules_baked_in\/node_minify.html"},{"title":"rsync","text":"rsync Not everyone is a fan of overheating your local machine and burning it into the ground before it is due just so they can claim they can work on the bus. If this is you and you want ot ensure a dev env that is identical for everyone rsync is for you. Rsync only syncs the files that have changed since the last time it ran, opposed to all files every time. If you are using windows you would want to look at cygwin tools or cwrsync. This rsync module just uses nodejs 'require('child_process').spawn'. If you see something in rsync you want to use, just add it to the set array, see the kitchen sink for an example. NB the set array can either be global or developer specific An example quilk.json block This contains the global configuration applied to all developers using rsync. { &quot;name&quot;: &quot;Rsync it&quot;, &quot;module&quot;: &quot;rsync&quot;, &quot;set&quot; : [&quot;--quiet&quot;], &quot;ignore&quot;: { &quot;linux&quot; : [], &quot;windows&quot; : [], &quot;mac&quot; : [], &quot;global&quot; : [ &quot;.git*&quot;, &quot;.idea*&quot;, &quot;storage&quot;, &quot;node_modules\/*&quot;, &quot;tests\/*&quot;, &quot;vendor\/*&quot; ] } } Developer block configuration The module runner will not run the module unless the developer contains an rsync configuration part. Below we can see 3 developer blocks configured, the first is the default configuration, the 2nd &amp; 3rd are specific for particular developers. John is configured to run an rsync based on the rsync block, where as Jan is not. In Jan's case the rsync module will simply not run (the rest of modules will run of course). A typical use case is Jan wishes to run a vagrant box for example. Any additional options, just place in the set array as seen below. You can also just set up this in your local ssh config file. &quot;developers&quot; : { &quot;default&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : false, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 5000, &quot;sound&quot;: true } }, &quot;john&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : true, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 2500, &quot;sound&quot;: true }, &quot;rsync&quot; : { &quot;set&quot; : [&quot;--compress-level=1&quot;], &quot;localPath&quot; : &quot;\/cygdrive\/d\/test_project\/&quot;, &quot;remote&quot; : &quot;www-data@8.9.10.110&quot;, &quot;serverPath&quot; : &quot;\/var\/vhosts\/service-test\/&quot; } }, &quot;jan&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : true, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 2500, &quot;sound&quot;: true } } },","tags":"","url":"Modules_baked_in\/rsync.html"},{"title":"sass find","text":"sass_find Slightly different from the sass_find, this module will find sass files in paths you provide and create a single sass file, ever so slightly slower than the sass_std, but which ever floats your boat :). As with the sass_std module, any additional settings you see in node-sass you would like to use, just add them and they will be passed on. EG below you can see &quot;outputStyle&quot;: &quot;expanded&quot;, &amp; &quot;sourceComments&quot;: true,. An example quilk.json block { &quot;name&quot;: &quot;App CSS (SASS find)&quot;, &quot;module&quot;: &quot;sass_find&quot;, &quot;outputStyle&quot;: &quot;expanded&quot;, &quot;sourceComments&quot;: true, &quot;include_first&quot;: [ &quot;\/public\/app\/core\/scss\/global.scss&quot; ], &quot;ignorePaths&quot; : [ &quot;core\/scss&quot; ], &quot;find_in_path&quot;: &quot;\/public\/app\/&quot;, &quot;target&quot;: &quot;\/public\/css\/index.css&quot; },","tags":"","url":"Modules_baked_in\/sass_find.html"},{"title":"sass std","text":"sass_std A standard module to build css from sass files. The same as the less_std, provide the in and out and the module handles the rest. It being sass of course results in a much much faster time to compile. As with the sass_find module, any additional settings you see in node-sass you would like to use, just add them and they will be passed on. EG below you can see &quot;outputStyle&quot;: &quot;expanded&quot;, &amp; &quot;sourceComments&quot;: true,. An example quilk.json block { &quot;name&quot;: &quot;App CSS&quot;, &quot;module&quot;: &quot;sass_std&quot;, &quot;outputStyle&quot;: &quot;expanded&quot;, &quot;sourceComments&quot;: true, &quot;input_path&quot;: &quot;\/resources\/assets\/sass\/app.scss&quot;, &quot;target&quot;: &quot;\/public\/css\/all.css&quot; }, Adding bower css files to the generated output Occasionally you find a 3rd party dependency from say bower that doesn't contain a SASS file to add into your sassy mix. No problem, quilk can accommodate this easily by adding a numeric array of paths relative to your quilk.json: { &quot;name&quot;: &quot;App CSS&quot;, &quot;module&quot;: &quot;sass_std&quot;, &quot;outputStyle&quot;: &quot;expanded&quot;, &quot;sourceComments&quot;: true, &quot;include_css&quot;: [ &quot;\/public\/app\/bower_components\/ng-dialog\/css\/ngDialog.min.css&quot;, &quot;\/public\/app\/bower_components\/ng-dialog\/css\/ngDialog-theme-default.min.css&quot;, &quot;\/public\/app\/bower_components\/select2\/dist\/css\/select2.min.css&quot;, &quot;\/public\/app\/bower_components\/datatables.net-dt\/css\/jquery.dataTables.min.css&quot; ], &quot;input_path&quot;: &quot;\/public\/app\/sass\/all.scss&quot;, &quot;target&quot;: &quot;\/public\/css\/all.css&quot; } The output will be the compiled CSS from the SASS then in the same outputted file the additional CSS injected via the include_css section.","tags":"","url":"Modules_baked_in\/sass_std.html"},{"title":"Modules custom","text":"Custom modules allow you to basically do anything you want with whatever you want. Currently there is no bundled modules in quilk with babelfy for example. If this is something you would want, a custom module is what you need... but you get the idea. There are two types of custom modules available to use: A 3rd party npm package installed to you project in the usual node_modules folder, included in the package.json file as a dependency. Your own project custom module kept in a specific folder within your project titled quilk_modules. For a module to work with the quilk runner you just need to expose a function called run. If you are writing a 3rd party module for others to use then the main file of the npm package should export an object with a run function at the top level. For example if the main file of your 3rd party npm package was index.js then this would have to contain something like this (the module would look exactly the same if it was a custom project module in the quilk_modules of your project): module.export = { run: function( next ){ \/* the codey good stuff *\/ \/\/put some good ingredients here please \/* when done call next *\/ next(); } }; Obviously this run function can do all the donkey work of the module of can just be a gateway to something bigger and more complex, you decide. Here is a list of all the goodies you have access to in a module global.current_module: This will be the current module object in the quilk.json. There is no required format, but see the example kitchen sink below for a starter. This is basially where you chunk in your project specific data. A little tip, if your module will write a file to disk, if you put this in the json as the target then the runner will automatically create the folders for you (checkout the kitchen sink json and note how they all have a target path). global.desktopNotify: This function accepts 2 params, a title and message body. It will be actioned if the users notifications are turned on in the quilk.json file. global.chokidarFileChangePath: If you are running quilk with watch then the current file that was changed will be in this variable. Handy for knowing when to skip the current module.. eg the less_std doesn't waste time building the less file if no less file was not altered. global.cliArgs: All the command line arguments are stored here, if you want your module to pivot by cli args then this is where to look. next: The one and only argument that will be passed to each module is a callback. This will be the next module to be run after the current has finished. This is quite similar to expressJS's next functions in middlewares. To create an example custom module run from the cli at the root of your project: quilk init example_module Example custom module in the quilk.json. To call a custom quilk module, if the module is a 3rd party from npm just enter the : { &quot;modules&quot; : [ { &quot;name&quot;: &quot;My module running&quot;, &quot;module&quot; : &quot;my_module&quot;, &quot;path_input&quot;: &quot;\/private\/path\/&quot;, &quot;path_output&quot;: &quot;\/public\/path\/&quot; }, ... rest of the modules array Here is a simple 3rd party quilk module I built as an example: https:\/\/www.npmjs.com\/package\/quilk-public-example-3rd-party-module Add it to the package.json of your project, and include quilk-public-example-3rd-party-module in your quilk.json module array eg: { &quot;modules&quot; : [ { &quot;name&quot;: &quot;test 3rd party&quot;, &quot;module&quot;: &quot;quilk-public-example-3rd-party-module&quot; }, ... If you take a look at the code in quilk-public-example-3rd-party-module you will see it requires a module that is not part of the quilk npm package.. yet it still works without a hitch... this has only just been tested on npm 3.10.3. This may or may not break in npm &lt; 3...","tags":"","url":"Modules_custom.html"},{"title":"Developer settings","text":"Developers block This can be as general or as granular as your like. As you can see from the example, this also contains developer specifics for the rsync module and notification popups (not everyone wants to see the notification balloon). Example &quot;developers&quot; : { &quot;default&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : false, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 5000, &quot;sound&quot;: true } }, &quot;john&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : true, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 5000, &quot;sound&quot;: true }, &quot;rsync&quot; : { &quot;localPath&quot; : &quot;\/mnt\/project101\/&quot;, &quot;remote&quot; : &quot;john@8.8.8.8&quot;, &quot;serverPath&quot; : &quot;\/var\/node\/www.101.com\/&quot; } } }","tags":"","url":"Developer_settings.html"},{"title":"Watcher","text":"Dont watch When using the watch option ensure that you instruct which file to not watch, dont_watch. The dont_watch option is quilk.json is passed to chokidar as directories and exact files to not trigger on. EG should you build a css file from sass you don't want to trigger chokidar to run all the modules again when it spots a change in the said css file ie ending up in an infinite loop.","tags":"","url":"Watcher.html"},{"title":"Emailing","text":"You can make use of the email module to send out an email message, add include_log as true and then all the console log output will be captured in full html syntax with colour. Here is an example of using a predefined email config block that will be triggered as the last module run in the live release array: ... &quot;release_commands_or_modules&quot;: { &quot;live&quot;:{ &quot;post&quot;:[{ &quot;name&quot;: &quot;Email total output&quot;, &quot;module&quot;: &quot;email&quot;, &quot;config&quot;: &quot;dev&quot;, &quot;email_subject&quot;: &quot;Logs from quilk build on live&quot;, &quot;email_message&quot;: &quot;The quilk build for live has just finished, below the log output.&quot;, &quot;include_log&quot;: true }] }, ... Note in the email the config section with the string 'main', this refers to a global email block eg: &quot;email&quot;: { &quot;main&quot;: { &quot;email_to&quot; : [&quot;devs@some-email.net&quot;], &quot;email_from&quot; : { &quot;name&quot;: &quot;quilk&quot;, &quot;email&quot;: &quot;john@gmail.com&quot; }, &quot;transport_options&quot;: { &quot;environment_variables&quot;: false, &quot;host&quot;: &quot;smtp.gmail.com&quot;, &quot;port&quot;: 465, &quot;secure&quot;: true, &quot;auth&quot;: { &quot;user&quot;: &quot;john@gmail.com&quot;, &quot;pass&quot;: &quot;password&quot; } } } } You can set as many blocks into this area as you want. As quilk might be building on a dev server, a testing server and a production server and you may not want to be sending emails with the same details. Just give each block a different name and refer to them in wherever you use the email module.","tags":"","url":"Emailing.html"},{"title":"Webhooks","text":"You can configure a release object to post the quilk output to a url... aka a webhook. Just provide the url and opening message and you are good to go. EG: ... &quot;error&quot; : [{ &quot;name&quot; : &quot;Pinging slack&quot;, &quot;module&quot; : &quot;webhook&quot;, &quot;message_start&quot; : &quot;Error building 007 server, here are the quilk logs&quot;, &quot;url&quot; : &quot;https:\/\/hooks.slack.com\/services\/11111111\/000000000\/000000000003&quot; }] ... If you need to pass any basic auth credential to the webhook you will need to add an additional 2 params, EG: ... &quot;error&quot; : [{ &quot;name&quot; : &quot;Pinging secret service&quot;, &quot;module&quot; : &quot;webhook&quot;, &quot;message_start&quot; : &quot;Error building 007 server, here are the quilk logs&quot;, &quot;url&quot; : &quot;https:\/\/hooks.secret.com\/services\/11111111\/000000000\/000000000003&quot;, &quot;auth_username&quot;: &quot;bob&quot;, &quot;auth_password&quot;: &quot;has a secure password&quot; }] ...","tags":"","url":"Webhooks.html"},{"title":"Release builds","text":"You can configure quilk to run additional modules and commands for specific environments, eg a dev server where you want to test compressed and obfusicated code. This is acheived with the release_commands_or_modules block of the quilk json. The release block can contain as many different releases as you like, eg &quot;dev&quot;, &quot;staging&quot;, &quot;live&quot;. Each block can contain either or all of the following: pre this is stuff that will be called before the std quilk modules. post this is stuff that will be called after the std quilk modules. complete this is stuff that will be called after the post and with zero errors. error this will be called when there is an error found in the pre, std modules, post or even complete. Please see the kicthen sink json for a fuller example.","tags":"","url":"Release_builds.html"},{"title":"The kitchen sink example JSON","text":"Below is an example quilk.json file that uses everything that quilk can offer. { &quot;modules&quot; : [ { &quot;name&quot;: &quot;Browserify files&quot;, &quot;module&quot; : &quot;browserify_bundle&quot;, &quot;browserify_main&quot;: &quot;\/public\/browserify_modules\/browserifyMain.js&quot;, &quot;browserify_bundle_name&quot;: &quot;bfyModules&quot;, &quot;target&quot; : &quot;\/public\/js\/bundle.js&quot; }, { &quot;name&quot; : &quot;Vendor Files&quot;, &quot;module&quot;: &quot;js_fixed&quot;, &quot;files&quot;: [ &quot;\/public\/bower_components\/jquery\/dist\/jquery.js&quot;, &quot;\/public\/bower_components\/bootstrap\/dist\/js\/bootstrap.min.js&quot;, &quot;\/public\/bower_components\/angular\/angular.min.js&quot;, &quot;\/public\/bower_components\/angular-route\/angular-route.min.js&quot;, &quot;\/public\/bower_components\/angular-sanitize\/angular-sanitize.min.js&quot;, &quot;\/public\/bower_components\/angular-bootstrap\/ui-bootstrap.min.js&quot;, &quot;\/public\/bower_components\/angular-bootstrap\/ui-bootstrap-tpls.min.js&quot;, &quot;\/public\/bower_components\/ngDialog\/js\/ngDialog.min.js&quot; ], &quot;target&quot;: &quot;\/public\/js\/vendor.js&quot; }, { &quot;name&quot;: &quot;App Files&quot;, &quot;module&quot;: &quot;js_find&quot;, &quot;include_first&quot;: [ &quot;\/public\/js_to_compile\/globalOverrideFunctions.js&quot;, &quot;\/public\/js_to_compile\/app.js&quot;, &quot;\/public\/js_to_compile\/app.config.js&quot; ], &quot;find_in_paths&quot;: [ &quot;\/public\/js_to_compile\/&quot; ], &quot;target&quot; : &quot;\/public\/js\/build.js&quot; }, { &quot;name&quot;: &quot;App CSS&quot;, &quot;module&quot;: &quot;sass_std&quot;, &quot;outputStyle&quot;: &quot;expanded&quot;, &quot;sourceComments&quot;: true, &quot;input_path&quot;: &quot;\/resources\/assets\/sass\/app.scss&quot;, &quot;target&quot;: &quot;\/public\/css\/all.css&quot; }, { &quot;name&quot;: &quot;App CSS (SASS find)&quot;, &quot;module&quot;: &quot;sass_find&quot;, &quot;outputStyle&quot;: &quot;expanded&quot;, &quot;sourceComments&quot;: true, &quot;include_first&quot;: [ &quot;\/public\/app\/core\/scss\/global.scss&quot; ], &quot;ignorePaths&quot; : [ &quot;core\/scss&quot; ], &quot;find_in_path&quot;: &quot;\/public\/app\/&quot;, &quot;target&quot;: &quot;\/public\/css\/index.css&quot; }, { &quot;name&quot; : &quot;Less compiler&quot;, &quot;module&quot; : &quot;less_std&quot;, &quot;resourcePaths&quot; : [&quot;\/resources\/assets\/less\/&quot;], &quot;input_path&quot; : &quot;\/resources\/assets\/less\/xenon.less&quot;, &quot;target&quot; : &quot;\/public\/css\/app.css&quot; }, { &quot;name&quot; : &quot;Vendor CSS Files&quot;, &quot;module&quot;: &quot;css_fixed&quot;, &quot;files&quot;: [ &quot;\/public\/bower_components\/bootstrap\/dist\/css\/bootstrap.css&quot;, &quot;\/public\/bower_components\/ngDialog\/css\/ngDialog.css&quot;, &quot;\/public\/bower_components\/ngDialog\/css\/ngDialog-theme-plain.css&quot; ], &quot;target&quot;: &quot;\/public\/css\/vendor.css&quot; }, { &quot;name&quot;: &quot;Rsync it&quot;, &quot;module&quot;: &quot;rsync&quot;, &quot;set&quot; : [&quot;--quiet&quot;], &quot;ignore&quot;: { &quot;linux&quot; : [], &quot;windows&quot; : [], &quot;mac&quot; : [], &quot;global&quot; : [ &quot;.git*&quot;, &quot;.idea*&quot;, &quot;storage&quot;, &quot;node_modules\/*&quot;, &quot;tests\/*&quot;, &quot;vendor\/*&quot; ] } } ], &quot;dont_watch&quot;: [ &quot;public\/js\/&quot;, &quot;public\/css\/all.css&quot; ], &quot;release_commands_or_modules&quot;: { &quot;live&quot;:{ &quot;pre&quot;: [ &quot;echo 'install the dependencies from npm and bower..'&quot;, { &quot;name&quot;: &quot;running bower install&quot;, &quot;module&quot;: &quot;command_run&quot;, &quot;program&quot;: &quot;bower&quot;, &quot;arguments&quot;: [&quot;install&quot;, &quot;-s&quot;] }, ], &quot;post&quot;: [{ &quot;name&quot;: &quot;minify the js&quot;, &quot;module&quot;: &quot;node_minify&quot;, &quot;type&quot;:&quot;uglifyjs&quot;, &quot;input&quot;:[ &quot;\/build\/js\/app.js&quot;, &quot;\/public\/js\/bundle.js&quot; ], &quot;target&quot;: &quot;\/build\/js\/app.min.js&quot; },{ &quot;name&quot;: &quot;minify the css&quot;, &quot;module&quot;: &quot;node_minify&quot;, &quot;type&quot;:&quot;sqwish&quot;, &quot;input&quot;:[ &quot;\/build\/css\/app_less.css&quot;, &quot;\/build\/css\/app_sass.css&quot;, &quot;\/build\/css\/vendors.css&quot; ], &quot;target&quot;: &quot;\/build\/css\/app.min.css&quot; }], &quot;complete&quot; : [{ &quot;name&quot;: &quot;Email total output&quot;, &quot;module&quot;: &quot;email&quot;, &quot;config&quot;: &quot;main&quot;, &quot;email_subject&quot;: &quot;Logs from quilk build on live&quot;, &quot;email_message&quot;: &quot;The quilk build for live has just finished.&quot;, &quot;include_log&quot;: true }], &quot;error&quot; : [{ &quot;name&quot; : &quot;Pinging slack&quot;, &quot;module&quot; : &quot;webhook&quot;, &quot;include_logs&quot;: true, &quot;message_start&quot; : &quot;Error building, here are the quilk logs&quot;, &quot;url&quot; : &quot;https:\/\/hooks.slack.com\/services\/11111111\/000000000\/000000000003&quot; }] } }, &quot;developers&quot; : { &quot;default&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : false, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 5000, &quot;sound&quot;: true } }, &quot;john&quot; : { &quot;platform&quot; : &quot;windows&quot;, &quot;notifier&quot; : { &quot;on&quot; : true, &quot;style&quot;: &quot;WindowsBalloon&quot;, &quot;time&quot; : 2500, &quot;sound&quot;: true }, &quot;rsync&quot; : { &quot;set&quot; : [&quot;--compress-level=1&quot;], &quot;localPath&quot; : &quot;\/cygdrive\/d\/test_project\/&quot;, &quot;remote&quot; : &quot;www-data@8.9.10.110&quot;, &quot;serverPath&quot; : &quot;\/var\/vhosts\/service-test\/&quot; } } }, &quot;email&quot;: { &quot;dev&quot;: { &quot;email_to&quot; : [&quot;john@mail.com&quot;, &quot;quilk@mrsquilks.com&quot;], &quot;email_from&quot; : { &quot;name&quot;: &quot;quilk&quot;, &quot;email&quot;: &quot;me@quilk.com&quot; }, &quot;transport_options&quot;: { &quot;host&quot;: &quot;smtp.gmail.com&quot;, &quot;port&quot;: 465, &quot;secure&quot;: true, &quot;auth&quot;: { &quot;user&quot;: &quot;john@gmail.com&quot;, &quot;pass&quot;: &quot;password&quot; } } }, &quot;live&quot;: { &quot;email_to&quot; : [&quot;john@mail.com&quot;, &quot;quilk@mrsquilks.com&quot;], &quot;email_from&quot; : { &quot;name&quot;: &quot;quilk&quot;, &quot;email&quot;: &quot;me@quilk.com&quot; }, &quot;transport_options&quot;: { &quot;environment_variables&quot;: true, &quot;host&quot;: &quot;EMAIL_HOST&quot;, &quot;port&quot;: &quot;EMAIL_PORT&quot;, &quot;secure&quot;: &quot;EMAIL_SECURE&quot;, &quot;auth&quot;: { &quot;user&quot;: &quot;EMAIL_USER&quot;, &quot;pass&quot;: &quot;EMAIL_PASS&quot; } } } } }","tags":"","url":"The_kitchen_sink_example_JSON.html"},{"title":"TODO","text":"#quilk todo list\/wishlist Write a quilk core module for babelify Expand these docs.. although this will be a never ending task.","tags":"","url":"TODO.html"}]}